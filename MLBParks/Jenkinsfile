
node('maven-appdev') {

  def mvnCmd = "mvn -s ./nexus_settings.xml"
  
  // Checkout Source Code
  stage('Checkout Source') {
      git url: 'https://github.com/TinyExplosions/advdev_homework_template.git'
  }
  
  // Copy the nexus_settings file
  sh "cp nexus_settings.xml MLBParks/nexus_settings.xml"
  
  dir('MLBParks') {
    def groupId = getGroupIdFromPom("pom.xml")
    def artifactId = getArtifactIdFromPom("pom.xml")
    def version = getVersionFromPom("pom.xml")

    // Set the tag for the development image: version + build number
    def devTag = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    // Using Maven build the war file
    // Do not run tests in this step
    stage('Build war') {
      echo "Building version ${devTag}"
      sh "pwd"
      sh "${mvnCmd} clean package -DskipTests=true"
    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      echo "Running Unit Tests"
      sh "${mvnCmd} test"
    }

    // Using Maven call SonarQube for Code Analysis
    // stage('Code Analysis') {
      // echo "Running Code Analysis"
      // sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-0f3c-sonarqube.apps.na39.openshift.opentlc.com"
    // }

    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
      echo "Publish to Nexus"
      sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.0f3c-nexus.svc.cluster.local:8081/repository/releases"
    }

    // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
      echo "Building OpenShift container image tasks:${devTag}"
      sh "oc start-build mlbparks --follow --from-file=./target/mlbparks.war -n 0f3c-parks-dev"
      openshiftTag alias: 'false', destStream: 'mlbparks', destTag: devTag, destinationNamespace: '0f3c-parks-dev',   namespace: '0f3c-parks-dev', srcStream: 'mlbparks', srcTag: 'latest', verbose: 'false'
    }

    // Deploy the built image to the Development Environment.
    stage('Deploy to Dev') {
      echo "Deploying container image to Development Project"
      sh "oc set image dc/mlbparks mlbparks=docker-registry.default.svc:5000/0f3c-parks-dev/mlbparks:${devTag} -n 0f3c-parks-dev"
      sh "oc delete configmap mlbparks-config -n 0f3c-parks-dev --ignore-not-found=true"
      sh "oc create configmap mlbparks-config -n 0f3c-parks-dev --from-literal=DB_HOST=mongodb --from-literal=DB_PORT=27017 --from-literal=DB_USERNAME=mongodb_user --from-literal=DB_PASSWORD=mongodb_password --from-literal=DB_NAME=mongodb"
      openshiftDeploy depCfg: 'mlbparks', namespace: '0f3c-parks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
      openshiftVerifyDeployment depCfg: 'mlbparks', namespace: '0f3c-parks-dev', replicaCount: '1', verbose: 'false',   verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
      openshiftVerifyService namespace: '0f3c-parks-dev', svcName: 'mlbparks', verbose: 'false'
    }

  }

}


// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
